import xml.etree.ElementTree as ET
import os
import requests
from pathlib import Path
def Get_Dex(seer_name_input: str) -> tuple:
    # 解析XML文件
    tree = ET.parse('SeerMainDex.xml')
    root = tree.getroot()

    # 查找所有<SeerMainDex>元素（这里假设<SeerMainDex>是根元素的直接子元素）
    seer_main_dex_elements = root.findall('./SeerMainDex')

    # 初始化变量
    seer_id = None
    seer_name_found = None
    seer_type = None
    species_strength_attack = None
    species_strength_defense = None
    species_strength_sp_attack = None
    species_strength_sp_defense = None
    species_strength_spd = None
    species_strength_hp = None
    species_strength = None
    attack_type = None
    hun_ying = None
    di_wu = None

    # 查找与输入名称匹配的<SeerMainDex>元素
    for element in seer_main_dex_elements:
        seer_name_found = element.find('./Seer_Name').text
        if seer_name_found == seer_name_input:  # 使用正确的参数变量
            seer_id = element.find('./Seer_ID').text
            seer_type = element.find('./Seer_Type').text
            species_strength_attack = element.find('./Species_Strength_Attack').text
            species_strength_defense = element.find('./Species_Strength_Defense').text
            species_strength_sp_attack = element.find('./Species_Strength_Sp_Attack').text
            species_strength_sp_defense = element.find('./Species_Strength_Sp_Defense').text
            species_strength_spd = element.find('./Species_Strength_Spd').text
            species_strength_hp = element.find('./Species_Strength_HP').text
            species_strength = element.find('./Species_Strength').text
            attack_type = element.find('./Attack_Type').text
            hun_ying = element.find('./Hun_Ying').text
            di_wu = element.find('./Di_Wu').text
            break

    # 返回找到的值（如果找到的话；否则返回None的元组）
    return (
        seer_id, seer_name_found, seer_type, species_strength_attack, species_strength_defense,
        species_strength_sp_attack, species_strength_sp_defense, species_strength_spd,
        species_strength_hp, species_strength, attack_type, hun_ying, di_wu
    ) if seer_name_found == seer_name_input else (None,) * 13


def get_seer_info(seer_name_to_search):
    result = Get_Dex(seer_name_to_search)
    
    if result[0] is not None:  # 检查是否找到了精灵
        seer_id, seer_name, seer_type, species_strength_attack, species_strength_defense, species_strength_sp_attack, species_strength_sp_defense, species_strength_spd, species_strength_hp, species_strength, attack_type, hun_ying, di_wu = result
        print(f"找到的精灵信息:")
        print("")
        print(f"精灵序号: {seer_id}")
        print(f"精灵名称: {seer_name}")
        print(f"精灵属性: {seer_type}")
        print(f"攻击种族值: {species_strength_attack}")
        print(f"防御种族值: {species_strength_defense}")
        print(f"特攻种族值: {species_strength_sp_attack}")
        print(f"特防种族值: {species_strength_sp_defense}")
        print(f"速度种族值: {species_strength_spd}")
        print(f"体力种族值: {species_strength_hp}")
        print(f"种族值总和: {species_strength}")    
        if int(attack_type) == 1:
            attack_type_str = "物理攻击"
        elif int(attack_type) == 2:
            attack_type_str = "特殊攻击"
        else:
            attack_type_str = "物理、特殊攻击兼备"
        
        print(f"攻击类型: {attack_type_str}")
        if hun_ying !="None":
            print('')
            print(f"精灵的魂印为: {hun_ying}")
            print('')
        else:
            print('')
            print(f"该精灵的魂印尚未更新，请关注更新数据包")
            print('')
        print("*"*10)
        print("")
        if di_wu !="None":
            print('')
            print(f"精灵的第五技能为: {di_wu}")
            print('')
        else:
            print('')
            print(f"该精灵的第五技能尚未更新，请关注更新数据包")
            print('')
        print("*"*10)
        print("")
    else:
        print(f"在数据库中未找到精灵名称为{seer_name_to_search}的精灵信息，请检查精灵名称或联系月桂进行更新。")
        print("*"*10)
        print("")
print("赛尔号热门精灵信息查询系统")
print("")
a = True
while a == True:
    # 这里是循环体，可以放入任何需要重复执行的代码
    seer_names = input('请输入要查询的精灵名称：')
    get_seer_info(seer_names)
    x = int(input('是否继续（1-是 2-退出）：'))
    if x == 2:
        del x,seer_names
        a = False
        print("")
    else:
        del x,seer_names
        a = True
        print("")


def update_seer_dex():
    xml_url = "https://lilyoffice.github.io/seer/SeerMainDex.xml"
    xml_filename = "SeerMainDex.xml"
    download_and_save_xml(xml_url, xml_filename)
    parse_xml(xml_filename)

def download_and_save_xml(url, filename):
    # 获取当前exe文件的路径（假设脚本被打包成了exe并且此函数在exe中运行）
    if getattr(sys, 'frozen', False):
        # 如果是打包的exe文件，使用_MEIPASS来获取临时解压目录
        # 注意：这个路径在PyInstaller打包的exe运行时有效，其他打包工具可能不同
        base_path = Path(sys._MEIPASS)
    else:
        # 如果不是exe文件，使用当前脚本的目录作为基路径
        base_path = Path(__file__).parent
 
    # 构建完整的文件路径
    file_path = base_path / filename
 
    # 发送HTTP GET请求下载文件
    response = requests.get(url, stream=True)
    response.raise_for_status()  # 如果请求出错，抛出HTTPError异常
 
    # 以二进制模式打开文件并写入下载的内容
    with file_path.open('wb') as f:
        for chunk in response.iter_content(chunk_size=8192):
            f.write(chunk)
 
    print(f"文件已保存到 {file_path}")
